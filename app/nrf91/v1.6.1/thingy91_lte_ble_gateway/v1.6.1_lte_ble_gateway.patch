diff --git a/boards/arm/thingy91_nrf52840/Kconfig b/boards/arm/thingy91_nrf52840/Kconfig
index c5eea61d8..055f95132 100644
--- a/boards/arm/thingy91_nrf52840/Kconfig
+++ b/boards/arm/thingy91_nrf52840/Kconfig
@@ -11,4 +11,18 @@ config BOARD_ENABLE_DCDC
 	select SOC_DCDC_NRF52X
 	default y
 
+config BOARD_THINGY91_NRF52840_RESET
+	bool "Enable GPIO reset line"
+	default y
+	help
+	  Let the nRF52840 be reset from the nRF9160 via a GPIO line.
+	  The GPIO line may only be one of the first 6 MCU interface pins.
+	  The line is active high.
+
+	
+module = BOARD_THINGY91
+module-str = Board Control
+source "subsys/logging/Kconfig.template.log_config"
+
+
 endif # BOARD_THINGY91_NRF52840
diff --git a/boards/arm/thingy91_nrf52840/Kconfig.defconfig b/boards/arm/thingy91_nrf52840/Kconfig.defconfig
index deee8e2ce..95a65d8d4 100644
--- a/boards/arm/thingy91_nrf52840/Kconfig.defconfig
+++ b/boards/arm/thingy91_nrf52840/Kconfig.defconfig
@@ -19,4 +19,7 @@ config USB_DEVICE_STACK
 
 endif # USB
 
+config BT_CTLR
+    default BT
+
 endif # BOARD_THINGY91_NRF52840
diff --git a/boards/arm/thingy91_nrf52840/thingy91_nrf52840_defconfig b/boards/arm/thingy91_nrf52840/thingy91_nrf52840_defconfig
index 8e97f5ab8..262d4b7da 100644
--- a/boards/arm/thingy91_nrf52840/thingy91_nrf52840_defconfig
+++ b/boards/arm/thingy91_nrf52840/thingy91_nrf52840_defconfig
@@ -15,4 +15,4 @@ CONFIG_SERIAL=y
 CONFIG_CONSOLE=y
 
 # Additional board options
-CONFIG_GPIO_AS_PINRESET=n
+CONFIG_GPIO_AS_PINRESET=y
\ No newline at end of file
diff --git a/boards/arm/thingy91_nrf9160/CMakeLists.txt b/boards/arm/thingy91_nrf9160/CMakeLists.txt
index 170d435e4..1ff978a2a 100644
--- a/boards/arm/thingy91_nrf9160/CMakeLists.txt
+++ b/boards/arm/thingy91_nrf9160/CMakeLists.txt
@@ -13,3 +13,8 @@ if(CONFIG_BOARD_THINGY91_NRF9160NS)
 	zephyr_library()
 	zephyr_library_sources(board_nonsecure.c)
 endif()
+
+if(CONFIG_BOARD_NRF52840_GPIO_RESET)
+  zephyr_library_sources(nrf52840_reset.c)
+endif()
+
diff --git a/boards/arm/thingy91_nrf9160/Kconfig b/boards/arm/thingy91_nrf9160/Kconfig
index d8229022c..228fae987 100644
--- a/boards/arm/thingy91_nrf9160/Kconfig
+++ b/boards/arm/thingy91_nrf9160/Kconfig
@@ -4,6 +4,18 @@
 #
 # SPDX-License-Identifier: LicenseRef-Nordic-5-Clause
 
+if BOARD_THINGY91_NRF9160 || BOARD_THINGY91_NRF9160NS
+
+config BOARD_NRF52840_GPIO_RESET
+        bool "Use nRF52840 PCA10090 GPIO reset pin"
+	default y if BT_H4
+        help
+          Use a GPIO pin to reset the nRF52840 controller and let it wait
+          until all bytes traveling to the H4 device have been received
+          and drained, thus ensuring communication can begin correctly.
+
+endif # BOARD_THINGY91_NRF9160 || BOARD_THINGY91_NRF9160NS
+
 module=BOARD
 module-dep=LOG
 module-str=Log level for board
diff --git a/boards/arm/thingy91_nrf9160/thingy91_nrf9160_common.dts b/boards/arm/thingy91_nrf9160/thingy91_nrf9160_common.dts
index 13d15f91a..6af287150 100644
--- a/boards/arm/thingy91_nrf9160/thingy91_nrf9160_common.dts
+++ b/boards/arm/thingy91_nrf9160/thingy91_nrf9160_common.dts
@@ -51,6 +51,12 @@
 		};
 	};
 
+	nrf52840_reset: gpio-reset {
+		compatible = "nordic,thingy91-nrf52840-reset";
+		status = "okay";
+		gpios = <&gpio0 10 GPIO_ACTIVE_LOW>;
+	};
+
 	aliases {
 		sw0 = &button0;
 		led0 = &red_led;
@@ -165,7 +171,7 @@
 &uart0 {
 	compatible = "nordic,nrf-uarte";
 	current-speed = <115200>;
-	status = "okay";
+	status = "disabled";
 	tx-pin = <18>;
 	rx-pin = <19>;
 	rts-pin = <20>;
diff --git a/samples/bluetooth/hci_lpuart/prj.conf b/samples/bluetooth/hci_lpuart/prj.conf
index 1997b45e3..10108fbc4 100644
--- a/samples/bluetooth/hci_lpuart/prj.conf
+++ b/samples/bluetooth/hci_lpuart/prj.conf
@@ -6,3 +6,6 @@ CONFIG_BT_HCI_RAW_H4=y
 CONFIG_BT_HCI_RAW_H4_ENABLE=y
 CONFIG_BT_BUF_ACL_RX_SIZE=251
 CONFIG_BT_BUF_EVT_DISCARDABLE_SIZE=255
+
+CONFIG_BT_LL_SW_SPLIT=y
+CONFIG_ZERO_LATENCY_IRQS=n
\ No newline at end of file
diff --git a/samples/nrf9160/lte_ble_gateway/prj.conf b/samples/nrf9160/lte_ble_gateway/prj.conf
index 74155ab22..86ad990e3 100644
--- a/samples/nrf9160/lte_ble_gateway/prj.conf
+++ b/samples/nrf9160/lte_ble_gateway/prj.conf
@@ -19,7 +19,7 @@ CONFIG_LTE_LINK_CONTROL=y
 CONFIG_LTE_AUTO_INIT_AND_CONNECT=n
 
 # AT host
-CONFIG_AT_HOST_LIBRARY=y
+CONFIG_AT_HOST_LIBRARY=n
 
 # Modem library
 CONFIG_NRF_MODEM_LIB=y
@@ -32,6 +32,8 @@ CONFIG_NRF_CLOUD=y
 
 # GPS
 CONFIG_GPS_USE_SIM=y
+#CONFIG_GPS_SIM_BASE_LATITUDE=-3344170
+#CONFIG_GPS_SIM_BASE_LONGITUDE=6251354
 
 # For demo purposes, we acquire fix often
 CONFIG_GPS_SEARCH_INTERVAL=30
@@ -65,3 +67,19 @@ CONFIG_UART_INTERRUPT_DRIVEN=y
 # Heap and stacks
 CONFIG_HEAP_MEM_POOL_SIZE=16384
 CONFIG_MAIN_STACK_SIZE=8192
+
+
+# Logging
+CONFIG_LOG=y
+CONFIG_LOG_MODE_IMMEDIATE=y
+####### for AT commands.  comment out to default info
+#CONFIG_AT_CMD_LOG_LEVEL_DBG=y
+#
+####### link control comment out to default info
+CONFIG_LTE_LINK_CONTROL_LOG_LEVEL_DBG=y
+#
+####### for urc notification; comment out to default info
+#CONFIG_AT_NOTIF_LOG_LEVEL_DBG=y
+
+CONFIG_BOARD_LOG_LEVEL_DBG=y
+
diff --git a/samples/nrf9160/lte_ble_gateway/src/aggregator.h b/samples/nrf9160/lte_ble_gateway/src/aggregator.h
index dc1ce44cb..d71dade5b 100644
--- a/samples/nrf9160/lte_ble_gateway/src/aggregator.h
+++ b/samples/nrf9160/lte_ble_gateway/src/aggregator.h
@@ -26,7 +26,7 @@
 #define ENTRY_MAX_SIZE (GPS_NMEA_SENTENCE_MAX_LENGTH + 4)
 #define FIFO_MAX_ELEMENT_COUNT 12
 
-enum sensor_data_type { THINGY_ORIENTATION, GPS_POSITION };
+enum sensor_data_type { THINGY_ORIENTATION, GPS_POSITION, THINGY_BUTTON };
 
 struct sensor_data {
 	uint8_t length;
diff --git a/samples/nrf9160/lte_ble_gateway/src/alarm.c b/samples/nrf9160/lte_ble_gateway/src/alarm.c
index a131a79db..98f07304e 100644
--- a/samples/nrf9160/lte_ble_gateway/src/alarm.c
+++ b/samples/nrf9160/lte_ble_gateway/src/alarm.c
@@ -17,6 +17,7 @@ static bool alarm_pending;
 extern void sensor_data_send(struct nrf_cloud_sensor_data *data);
 
 char *orientation_strings[] = {"LEFT", "NORMAL", "RIGHT", "UPSIDE_DOWN"};
+char *button_strings[] = {"Release", "Press"};
 
 void alarm(void)
 {
@@ -35,7 +36,9 @@ void send_aggregated_data(void)
 	static struct nrf_cloud_sensor_data flip_cloud_data = {
 		.type = NRF_CLOUD_SENSOR_FLIP,
 	};
-
+	static struct nrf_cloud_sensor_data button_cloud_data = {
+		.type = NRF_CLOUD_SENSOR_BUTTON,
+	};
 	struct sensor_data aggregator_data;
 
 	if (!alarm_pending) {
@@ -75,6 +78,22 @@ void send_aggregated_data(void)
 			    *((uint32_t *)&aggregator_data.data[0]);
 			sensor_data_send(&gps_cloud_data);
 			break;
+		case THINGY_BUTTON:
+			printk("%d] Sending button data.\n",
+			       aggregator_element_count_get());
+			if (aggregator_data.length != 1 ||
+				aggregator_data.data[0] >=
+				ARRAY_SIZE(button_strings)) {
+				printk("Unexpected button data format, dropping\n");
+				continue;
+			}
+			button_cloud_data.data.ptr =
+				button_strings[aggregator_data.data[0]];
+			button_cloud_data.data.len = strlen(
+				button_strings[aggregator_data.data[0]]) - 1;
+			sensor_data_send(&button_cloud_data);
+	
+			break;
 
 		default:
 			printk("Unsupported data type from aggregator: %d.\n",
diff --git a/samples/nrf9160/lte_ble_gateway/src/ble.c b/samples/nrf9160/lte_ble_gateway/src/ble.c
index 265feed97..ed5054a9b 100644
--- a/samples/nrf9160/lte_ble_gateway/src/ble.c
+++ b/samples/nrf9160/lte_ble_gateway/src/ble.c
@@ -28,13 +28,30 @@
 	BT_UUID_DECLARE_128(0x42, 0x00, 0x74, 0xA9, 0xFF, 0x52, 0x10, 0x9B,    \
 			    0x33, 0x49, 0x35, 0x9B, 0x00, 0x04, 0x68, 0xEF)
 
+/* Thingy service UUID */
+#define BT_UUID_TUS                                                            \
+	BT_UUID_DECLARE_128(0x42, 0x00, 0x74, 0xA9, 0xFF, 0x52, 0x10, 0x9B,    \
+			    0x33, 0x49, 0x35, 0x9B, 0x00, 0x03, 0x68, 0xEF)
+
 /* Thingy characteristic UUID */
 #define BT_UUID_TOC                                                            \
 	BT_UUID_DECLARE_128(0x42, 0x00, 0x74, 0xA9, 0xFF, 0x52, 0x10, 0x9B,    \
 			    0x33, 0x49, 0x35, 0x9B, 0x03, 0x04, 0x68, 0xEF)
 
+/* Thingy characteristic UUID */
+#define BT_UUID_BUT                                                             \
+	BT_UUID_DECLARE_128(0x42, 0x00, 0x74, 0xA9, 0xFF, 0x52, 0x10, 0x9B,    \
+			    0x33, 0x49, 0x35, 0x9B, 0x02, 0x03, 0x68, 0xEF)
+
 extern void alarm(void);
 
+struct bt_conn *default_conn = NULL;
+uint8_t gButtonServiceFoundFlag = 0;
+
+uint8_t ble_con_stat(void)
+{
+    return gButtonServiceFoundFlag;
+}
 static uint8_t on_received(struct bt_conn *conn,
 			struct bt_gatt_subscribe_params *params,
 			const void *data, uint16_t length)
@@ -61,6 +78,99 @@ static uint8_t on_received(struct bt_conn *conn,
 	return BT_GATT_ITER_CONTINUE;
 }
 
+static uint8_t on_received_button(struct bt_conn *conn,
+			struct bt_gatt_subscribe_params *params,
+			const void *data, uint16_t length)
+{
+	if (length > 0) {
+		printk("Button: %x\n", ((uint8_t *)data)[0]);
+		struct sensor_data in_data;
+
+		in_data.type = THINGY_BUTTON;
+		in_data.length = 1;
+		in_data.data[0] = ((uint8_t *)data)[0];
+
+		if (aggregator_put(in_data) != 0) {
+			printk("Was not able to insert Thingy button data into aggregator.\n");
+		}
+		/* If the button pressed, trigger an alarm. */
+		if (((uint8_t *)data)[0] == 1) {
+			alarm();
+		}
+
+	} else {
+		printk("Button notification with 0 length\n");
+	}
+	return BT_GATT_ITER_CONTINUE;
+}
+static void discovery_completed_button(struct bt_gatt_dm *disc, void *ctx)
+{
+	int err;
+
+	/* Must be statically allocated */
+	static struct bt_gatt_subscribe_params param = {
+		.notify = on_received_button,
+		.value = BT_GATT_CCC_NOTIFY,
+	};
+
+	const struct bt_gatt_dm_attr *chrc;
+	const struct bt_gatt_dm_attr *desc;
+
+#if 1
+	chrc = bt_gatt_dm_char_by_uuid(disc, BT_UUID_BUT);
+	if (!chrc) {
+		printk("Missing Thingy button characteristic\n");
+		goto release_b;
+	}
+
+	desc = bt_gatt_dm_desc_by_uuid(disc, chrc, BT_UUID_BUT);
+	if (!desc) {
+		printk("Missing Thingy button char value descriptor\n");
+		goto release_b;
+	} 
+
+	param.value_handle = desc->handle,
+
+	desc = bt_gatt_dm_desc_by_uuid(disc, chrc, BT_UUID_GATT_CCC);
+	if (!desc) {
+		printk("Missing Thingy button char CCC descriptor\n");
+		goto release_b;
+	}
+
+	param.ccc_handle = desc->handle;
+    
+    param.notify = on_received_button;
+    param.value = BT_GATT_CCC_NOTIFY;
+
+    //err = bt_gatt_unsubscribe(default_conn, &param);
+    atomic_set_bit(param.flags, BT_GATT_SUBSCRIBE_FLAG_VOLATILE);
+	err = bt_gatt_subscribe(default_conn, &param);
+	if (err) {
+		printk("Subscribe failed (err %d)\n", err);
+    }
+    printk("Thingy button service found!\n");
+    gButtonServiceFoundFlag = 1;
+#endif	
+release_b:
+	err = bt_gatt_dm_data_release(disc);
+	if (err) {
+		printk("Could not release discovery data, err: %d\n", err);
+	}
+}
+static void discovery_service_not_found_button(struct bt_conn *conn, void *ctx)
+{
+	printk("Thingy button service not found!\n");
+}
+static void discovery_error_found_button(struct bt_conn *conn, int err, void *ctx)
+{
+	printk("The button procedure failed, err %d\n", err);
+}
+static struct bt_gatt_dm_cb discovery_cb_button = {
+	.completed = discovery_completed_button,
+	.service_not_found = discovery_service_not_found_button,
+	.error_found = discovery_error_found_button,
+};
+
 static void discovery_completed(struct bt_gatt_dm *disc, void *ctx)
 {
 	int err;
@@ -79,6 +189,7 @@ static void discovery_completed(struct bt_gatt_dm *disc, void *ctx)
 		printk("Missing Thingy orientation characteristic\n");
 		goto release;
 	}
+ 
 
 	desc = bt_gatt_dm_desc_by_uuid(disc, chrc, BT_UUID_TOC);
 	if (!desc) {
@@ -93,19 +204,33 @@ static void discovery_completed(struct bt_gatt_dm *disc, void *ctx)
 		printk("Missing Thingy orientation char CCC descriptor\n");
 		goto release;
 	}
+    
+    param.notify = on_received;
+    param.value = BT_GATT_CCC_NOTIFY;
 
 	param.ccc_handle = desc->handle;
+    
+    //err = bt_gatt_unsubscribe(default_conn, &param);
+    atomic_set_bit(param.flags, BT_GATT_SUBSCRIBE_FLAG_VOLATILE);
 
-	err = bt_gatt_subscribe(bt_gatt_dm_conn_get(disc), &param);
+	err = bt_gatt_subscribe(default_conn, &param);
 	if (err) {
 		printk("Subscribe failed (err %d)\n", err);
-	}
+    }
+    printk("Thingy orientation service found!\n");
 
 release:
 	err = bt_gatt_dm_data_release(disc);
 	if (err) {
 		printk("Could not release discovery data, err: %d\n", err);
 	}
+    if(default_conn != NULL)
+    {
+        err = bt_gatt_dm_start(default_conn, BT_UUID_TUS, &discovery_cb_button, NULL);
+        if (err) {
+            printk("Could not start service discovery, err %d\n", err);
+        }
+    }
 }
 
 static void discovery_service_not_found(struct bt_conn *conn, void *ctx)
@@ -118,12 +243,14 @@ static void discovery_error_found(struct bt_conn *conn, int err, void *ctx)
 	printk("The discovery procedure failed, err %d\n", err);
 }
 
+
 static struct bt_gatt_dm_cb discovery_cb = {
 	.completed = discovery_completed,
 	.service_not_found = discovery_service_not_found,
 	.error_found = discovery_error_found,
 };
 
+
 static void connected(struct bt_conn *conn, uint8_t conn_err)
 {
 	int err;
@@ -132,20 +259,68 @@ static void connected(struct bt_conn *conn, uint8_t conn_err)
 	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
 
 	if (conn_err) {
-		printk("Failed to connect to %s (%u)\n", addr, conn_err);
+		printk("Failed to connect to %s (%d)", (addr),
+			conn_err);
+
+		if (default_conn == conn) {
+			bt_conn_unref(default_conn);
+			default_conn = NULL;
+
+			err = bt_scan_start(BT_SCAN_TYPE_SCAN_ACTIVE);
+			if (err) {
+				printk("Scanning failed to start (err %d)",
+					err);
+			}
+		}
+
 		return;
 	}
-
+    
 	printk("Connected: %s\n", addr);
-
+    default_conn = conn;
+#if 0
+	err = bt_gatt_dm_start(conn, BT_UUID_TUS, &discovery_cb, NULL);
+	if (err) {
+		printk("Could not start service discovery, err %d\n", err);
+	}
+#endif
 	err = bt_gatt_dm_start(conn, BT_UUID_TMS, &discovery_cb, NULL);
 	if (err) {
 		printk("Could not start service discovery, err %d\n", err);
 	}
+	err = bt_scan_stop();
+	if ((!err) && (err != -EALREADY)) {
+		printk("Stop LE scan failed (err %d)", err);
+	}
+}
+
+static void disconnected(struct bt_conn *conn, uint8_t conn_err)
+{
+	char addr[BT_ADDR_LE_STR_LEN];
+	int err;
+
+	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
+
+	printk("Disconnected: %s (conn_err %u)", (addr),
+		conn_err);
+
+	if (default_conn != conn) {
+		return;
+	}
+
+	bt_conn_unref(default_conn);
+	default_conn = NULL;
+    gButtonServiceFoundFlag = 0;
+	err = bt_scan_start(BT_SCAN_TYPE_SCAN_ACTIVE);
+	if (err) {
+		printk("Scanning failed to start (err %d)",
+			err);
+	}
 }
 
 static struct bt_conn_cb conn_callbacks = {
 	.connected = connected,
+    .disconnected = disconnected,
 };
 
 void scan_filter_match(struct bt_scan_device_info *device_info,
@@ -163,8 +338,12 @@ void scan_connecting_error(struct bt_scan_device_info *device_info)
 {
 	printk("Connection to peer failed!\n");
 }
-
-BT_SCAN_CB_INIT(scan_cb, scan_filter_match, NULL, scan_connecting_error, NULL);
+static void scan_connecting(struct bt_scan_device_info *device_info,
+			    struct bt_conn *conn)
+{
+	default_conn = bt_conn_ref(conn);
+}
+BT_SCAN_CB_INIT(scan_cb, scan_filter_match, NULL, scan_connecting_error, scan_connecting);
 
 static void scan_start(void)
 {
diff --git a/samples/nrf9160/lte_ble_gateway/src/ble.h b/samples/nrf9160/lte_ble_gateway/src/ble.h
index 5d896d15d..d6d1a04b6 100644
--- a/samples/nrf9160/lte_ble_gateway/src/ble.h
+++ b/samples/nrf9160/lte_ble_gateway/src/ble.h
@@ -8,5 +8,5 @@
 #define _BLE_H_
 
 void ble_init(void);
-
+uint8_t ble_con_stat(void);
 #endif /* _BLE_H_ */
diff --git a/samples/nrf9160/lte_ble_gateway/src/main.c b/samples/nrf9160/lte_ble_gateway/src/main.c
index a0510f8d2..cabe5c3c2 100644
--- a/samples/nrf9160/lte_ble_gateway/src/main.c
+++ b/samples/nrf9160/lte_ble_gateway/src/main.c
@@ -43,7 +43,23 @@
  * if the event NRF_CLOUD_EVT_TRANSPORT_CONNECTED is not received.
  */
 #define RETRY_CONNECT_WAIT K_MSEC(90000)
+#if defined(CONFIG_BOARD_THINGY91_NRF9160NS)
+/*  
+LED1: Red
+LED2: Green
+LED3: Blue
 
+*/
+enum {
+	LEDS_INITIALIZING       = LED_ON(DK_LED1_MSK | DK_LED2_MSK | DK_LED3_MSK),
+	LEDS_LTE_CONNECTING     = LED_BLINK(DK_LED1_MSK),
+	LEDS_LTE_CONNECTED      = LED_ON(DK_LED1_MSK),
+	LEDS_CLOUD_CONNECTING   = LED_BLINK(DK_LED2_MSK),
+	LEDS_CLOUD_PAIRING_WAIT = LED_BLINK(DK_LED2_MSK),
+	LEDS_CLOUD_CONNECTED    = LED_ON(DK_LED2_MSK),
+	LEDS_ERROR              = LED_ON(DK_ALL_LEDS_MSK)
+} display_state;
+#else
 enum {
 	LEDS_INITIALIZING       = LED_ON(0),
 	LEDS_LTE_CONNECTING     = LED_BLINK(DK_LED3_MSK),
@@ -53,7 +69,7 @@ enum {
 	LEDS_CLOUD_CONNECTED    = LED_ON(DK_LED4_MSK),
 	LEDS_ERROR              = LED_ON(DK_ALL_LEDS_MSK)
 } display_state;
-
+#endif
 /* Variable to keep track of nRF cloud user association request. */
 static atomic_val_t association_requested;
 
@@ -200,6 +216,8 @@ static void gps_handler(const struct device *dev, struct gps_event *evt)
 	}
 }
 
+
+
 /**@brief Update LEDs state. */
 static void leds_update(struct k_work *work)
 {
@@ -209,11 +227,23 @@ static void leds_update(struct k_work *work)
 
 	ARG_UNUSED(work);
 
+#if defined(CONFIG_BOARD_THINGY91_NRF9160NS)
+    led_on_mask &= ~(DK_LED3_MSK | DK_LED4_MSK | DK_LED1_MSK | DK_LED2_MSK);
+#else
 	/* Reset LED3 and LED4. */
 	led_on_mask &= ~(DK_LED3_MSK | DK_LED4_MSK);
-
-	/* Set LED3 and LED4 to match current state. */
-	led_on_mask |= LED_GET_ON(display_state);
+#endif
+
+	/* Set LEDs to match current state. */
+    if(ble_con_stat()){
+        display_state |= LED_BLINK(DK_LED3_MSK); /* add bliking blue indicating ble connected */
+        led_on_mask |= LED_GET_ON(display_state);
+    }
+    else{
+        display_state &= (~(LED_BLINK(DK_LED3_MSK))); /* remove bliking blue indicating ble connected */
+        led_on_mask |= LED_GET_ON(display_state);
+    }
+    
 
 	led_on = !led_on;
 	if (led_on) {
