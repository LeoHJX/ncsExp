diff --git a/cmake/partition_manager.cmake b/cmake/partition_manager.cmake
index 63cdb3b2e..0d526e658 100644
--- a/cmake/partition_manager.cmake
+++ b/cmake/partition_manager.cmake
@@ -421,7 +421,7 @@ else()
       endforeach()
 
       if (CONFIG_NRF53_UPGRADE_NETWORK_CORE
-          AND CONFIG_HCI_RPMSG_BUILD_STRATEGY_FROM_SOURCE)
+          AND (CONFIG_HCI_RPMSG_BUILD_STRATEGY_FROM_SOURCE OR CONFIG_BLE_NETWORK_CORE))
           # Create symbols for the offset reqired for moving the signed network
           # core application to MCUBoots secondary slot. This is needed
           # because  objcopy does not support arithmetic expressions as argument
diff --git a/modules/mcuboot/CMakeLists.txt b/modules/mcuboot/CMakeLists.txt
index 6743dd426..2eec188d9 100644
--- a/modules/mcuboot/CMakeLists.txt
+++ b/modules/mcuboot/CMakeLists.txt
@@ -236,7 +236,7 @@ if(CONFIG_BOOTLOADER_MCUBOOT)
       )
 
     if (CONFIG_NRF53_UPGRADE_NETWORK_CORE
-        AND CONFIG_HCI_RPMSG_BUILD_STRATEGY_FROM_SOURCE)
+        AND (CONFIG_HCI_RPMSG_BUILD_STRATEGY_FROM_SOURCE OR CONFIG_BLE_NETWORK_CORE))
       # Network core application updates are enabled.
       # We know this since MCUBoot is enabled on the application core, and
       # a network core child image is included in the build.
diff --git a/samples/CMakeLists.txt b/samples/CMakeLists.txt
index c1c5ae699..4dcfeec1a 100644
--- a/samples/CMakeLists.txt
+++ b/samples/CMakeLists.txt
@@ -68,7 +68,7 @@ endif()
 # Automatically include the multiprotocol_rpmsg as child image when both RPMSG HCI
 # and RPMSG 802.15.4 Serialization are enabled or the hci_rpmsg sample when
 # only RPMSG HCI is enabled. For any of these samples change the board to be the network core.
-if (CONFIG_BT_RPMSG_NRF53)
+if (CONFIG_BT_RPMSG_NRF53 OR CONFIG_BLE_NETWORK_CORE)
   if (CONFIG_SOC_NRF5340_CPUAPP)
 
     if (CONFIG_NRF_802154_SER_HOST)
@@ -78,9 +78,15 @@ if (CONFIG_BT_RPMSG_NRF53)
       "CONFIG_BT_RPMSG_NRF53 and CONFIG_NRF_802154_SER_HOST are set to 'y'")
     else()
       set(NETCORE_IMAGE "hci_rpmsg")
-      set(NETCORE_IMAGE_PATH "${ZEPHYR_BASE}/samples/bluetooth/${NETCORE_IMAGE}")
-      message("Adding 'hci_rpmsg' firmware as child image since "
-      "CONFIG_BT_RPMSG_NRF53 is set to 'y'")
+      if (CONFIG_BLE_NETWORK_CORE)
+        set(NETCORE_IMAGE_PATH "${ZEPHYR_BASE}/../nrf53_ble/ble_netcore")
+        message("Adding 'ble_netcore' firmware as child image since "
+        "CONFIG_BLE_NETWORK_CORE is set to 'y'")	  
+      else()
+        set(NETCORE_IMAGE_PATH "${ZEPHYR_BASE}/samples/bluetooth/${NETCORE_IMAGE}")
+        message("Adding 'hci_rpmsg' firmware as child image since "
+        "CONFIG_BT_RPMSG_NRF53 is set to 'y'")
+      endif()
     endif()
 
     if (CONFIG_BT_LL_SOFTDEVICE_DEFAULT)
diff --git a/samples/nrf5340/netboot/src/main.c b/samples/nrf5340/netboot/src/main.c
index 11807d351..9ed393957 100644
--- a/samples/nrf5340/netboot/src/main.c
+++ b/samples/nrf5340/netboot/src/main.c
@@ -37,11 +37,14 @@ void main(void)
 		 */
 		uint32_t update_addr = (uint32_t)pcd_cmd_data_ptr_get();
 
-		valid = bl_validate_firmware(s0_addr, update_addr);
-		if (!valid) {
-			printk("Unable to find valid firmware inside %p\n\r",
-				(void *)update_addr);
-			goto failure;
+		if (update_addr < 0x10000000)
+		{
+			valid = bl_validate_firmware(s0_addr, update_addr);
+			if (!valid) {
+				printk("Unable to find valid firmware inside %p\n\r",
+					(void *)update_addr);
+				goto failure;
+			}
 		}
 
 		err = pcd_fw_copy(fdev);
diff --git a/subsys/pcd/src/pcd.c b/subsys/pcd/src/pcd.c
index 510cf944f..dc7d31e91 100644
--- a/subsys/pcd/src/pcd.c
+++ b/subsys/pcd/src/pcd.c
@@ -12,6 +12,16 @@
 
 LOG_MODULE_REGISTER(pcd, CONFIG_PCD_LOG_LEVEL);
 
+#ifndef CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE
+#define CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE 4096
+#endif
+
+/* Shared memory configuration */
+#define SHM_NODE            DT_CHOSEN(zephyr_ipc_shm)
+#define SHM_START_ADDR      (DT_REG_ADDR(SHM_NODE) + 0x400)
+#define SHM_SIZE            (DT_REG_SIZE(SHM_NODE) - 0x400)
+#define SHM_DEVICE_NAME     "sram0.shm"
+
 /** Magic value written to indicate that a copy should take place. */
 #define PCD_CMD_MAGIC_COPY 0xb5b4b3b6
 /** Magic value written to indicate that a something failed. */
@@ -32,12 +42,18 @@ struct pcd_cmd {
 	const void *data;     /* Data to copy*/
 	size_t len;           /* Number of bytes to copy */
 	off_t offset;         /* Offset to store the flash image in */
+	void * image_chunk;   //RAM address used to store a chunk of image from external flash
+	uint32_t chunk_len;		//the size of the image chunk
+	uint32_t bytes_moved;  //bytes already transfered to netcore
+	bool image_chunk_available;   //a image chunk is available
+	bool image_chunk_written; //the image chunk is done with programming
 } __aligned(4);
 
 static struct pcd_cmd *cmd = (struct pcd_cmd *)PCD_CMD_ADDRESS;
 
 void pcd_fw_copy_invalidate(void)
 {
+	printk("pcd_fw_copy_fail");
 	cmd->magic = PCD_CMD_MAGIC_FAIL;
 }
 
@@ -62,7 +78,7 @@ int pcd_fw_copy(const struct device *fdev)
 	struct stream_flash_ctx stream;
 	uint8_t buf[CONFIG_PCD_BUF_SIZE];
 	int rc;
-
+	printk("pcd_fw_copy dev %s ", fdev->name);
 	if (cmd->magic != PCD_CMD_MAGIC_COPY) {
 		return -EFAULT;
 	}
@@ -70,18 +86,44 @@ int pcd_fw_copy(const struct device *fdev)
 	rc = stream_flash_init(&stream, fdev, buf, sizeof(buf),
 			       cmd->offset, 0, NULL);
 	if (rc != 0) {
-		LOG_ERR("stream_flash_init failed: %d", rc);
+		LOG_ERR("stream_flash_init failed: %d ", rc);
 		return rc;
 	}
-
-	rc = stream_flash_buffered_write(&stream, (uint8_t *)cmd->data,
-					 cmd->len, true);
-	if (rc != 0) {
-		LOG_ERR("stream_flash_buffered_write fail: %d", rc);
-		return rc;
+	if ((uint32_t)cmd->data < 0x10000000)
+	{
+		printk("Secondary internal Flash");
+		//internal flash
+		rc = stream_flash_buffered_write(&stream, (uint8_t *)cmd->data,
+						cmd->len, true);
+		if (rc != 0) {
+			LOG_ERR("stream_flash_buffered_write fail: %d ", rc);
+			return rc;
+		}
 	}
-
-	LOG_INF("Transfer done");
+	else
+	{	
+		printk("Secondary external Flash");			
+		//external flash
+		while (cmd->bytes_moved < cmd->len)
+		{
+			if (cmd->image_chunk_available)
+			{
+				rc = stream_flash_buffered_write(&stream, (uint8_t *)cmd->image_chunk,
+								cmd->chunk_len, true);
+				if (rc != 0) {
+					LOG_ERR("stream_flash_buffered_write fail: %d", rc);
+					memset((uint8_t *)cmd->image_chunk, 0, 4096);
+					return rc;
+				}				
+				printk("stream written bytes %x ", stream.bytes_written);		
+				cmd->image_chunk_available = false;
+				cmd->image_chunk_written = true;
+			}
+		}
+		memset((uint8_t *)cmd->image_chunk, 0, 4096);
+	}
+	
+	printk("Transfer done");
 
 	return 0;
 }
@@ -89,11 +131,38 @@ int pcd_fw_copy(const struct device *fdev)
 void pcd_fw_copy_done(void)
 {
 	/* Signal complete by setting magic to DONE */
+	printk("pcd_fw_copy_done");
 	cmd->magic = PCD_CMD_MAGIC_DONE;
 }
 
 #if defined(CONFIG_SOC_NRF5340_CPUAPP) && defined(CONFIG_MCUBOOT)
 
+
+static void pcd_cmd_update()
+{
+	if ((uint32_t)cmd->data >= 0x10000000)
+	{
+		uint32_t bytes_left;
+		cmd->image_chunk = (uint8_t *) SHM_START_ADDR;
+		bytes_left = cmd->len - cmd->bytes_moved;
+		if (bytes_left > CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE)
+		{
+			cmd->chunk_len = CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE;
+		}
+		else 
+		{
+			cmd->chunk_len = bytes_left;
+		}
+		
+		memcpy(cmd->image_chunk, (uint8_t *)cmd->data + cmd->bytes_moved, cmd->chunk_len);
+		cmd->bytes_moved += cmd->chunk_len;
+		//printk("bytes moved %x ", cmd->bytes_moved);
+		cmd->image_chunk_written = false;
+		cmd->image_chunk_available = true;
+	}
+}
+
+
 /** @brief Construct a PCD CMD for copying data/firmware.
  *
  * @param data   The data to copy.
@@ -113,10 +182,15 @@ static int pcd_cmd_write(const void *data, size_t len, off_t offset)
 	cmd->data = data;
 	cmd->len = len;
 	cmd->offset = offset;
+	cmd->bytes_moved = 0;
+	printk("new image addr %x len %x offset %x", (uint32_t)data, len, cmd->offset);
 
+	pcd_cmd_update();
+	
 	return 0;
 }
 
+
 int pcd_network_core_update(const void *src_addr, size_t len)
 {
 	int err;
@@ -133,24 +207,33 @@ int pcd_network_core_update(const void *src_addr, size_t len)
 
 	err = pcd_cmd_write(src_addr, len, NET_CORE_APP_OFFSET);
 	if (err != 0) {
-		LOG_INF("Error while writing PCD cmd: %d", err);
+		printk("Error while writing PCD cmd: %d", err);
 		return err;
 	}
 
 	nrf_reset_network_force_off(NRF_RESET, false);
-	LOG_INF("Turned on network core");
+	printk("Turned on network core");
+
+	k_busy_wait(1 * USEC_PER_SEC);
 
 	do {
 		/* Wait for 1 second to avoid issue where network core
 		 * is unable to write to shared RAM.
-		 */
-		k_busy_wait(1 * USEC_PER_SEC);
+		 */		
+		k_busy_wait(1 * USEC_PER_MSEC);
 
 		err = pcd_fw_copy_status_get();
+		if (err == PCD_STATUS_COPY)
+		{
+			if (cmd->image_chunk_written == true)
+			{
+				pcd_cmd_update();
+			}
+		}
 	} while (err == PCD_STATUS_COPY);
 
 	if (err == PCD_STATUS_COPY_FAILED) {
-		LOG_ERR("Network core update failed");
+		printk("Network core update failed");
 		return err;
 	}
 
@@ -163,7 +246,7 @@ int pcd_network_core_update(const void *src_addr, size_t len)
 void pcd_lock_ram(void)
 {
 	uint32_t region = PCD_CMD_ADDRESS/CONFIG_NRF_SPU_RAM_REGION_SIZE;
-
+	LOG_INF("pcd_lock_ram");
 	nrf_spu_ramregion_set(NRF_SPU, region, true, NRF_SPU_MEM_PERM_READ,
 			true);
 }
