diff --git a/boot/bootutil/src/loader.c b/boot/bootutil/src/loader.c
index 716e3ed..1393a04 100644
--- a/boot/bootutil/src/loader.c
+++ b/boot/bootutil/src/loader.c
@@ -44,6 +44,8 @@
 #include "bootutil/security_cnt.h"
 #include "bootutil/boot_record.h"
 #include "bootutil/fault_injection_hardening.h"
+#include <storage/flash_map.h>
+#include <drivers/flash.h>
 
 #ifdef CONFIG_SOC_NRF5340_CPUAPP
 #include <dfu/pcd.h> 
@@ -57,6 +59,12 @@
 
 MCUBOOT_LOG_MODULE_DECLARE(mcuboot);
 
+#ifdef PM_MCUBOOT_SECONDARY_ADDRESS
+#define SECONDARY_OFFSET_ADDRESS PM_MCUBOOT_SECONDARY_ADDRESS
+#else
+#define SECONDARY_OFFSET_ADDRESS 
+#endif
+
 static struct boot_loader_state boot_data;
 
 #if (BOOT_IMAGE_NUMBER > 1)
@@ -729,14 +737,37 @@ boot_validated_swap_type(struct boot_loader_state *state,
     int swap_type;
     fih_int fih_rc = FIH_FAILURE;
     bool upgrade_valid = false;
-
+    
 #if defined(PM_S1_ADDRESS) || defined(CONFIG_SOC_NRF5340_CPUAPP)
-    const struct flash_area *secondary_fa =
-        BOOT_IMG_AREA(state, BOOT_SECONDARY_SLOT);
-    struct image_header *hdr = (struct image_header *)secondary_fa->fa_off;
+    const struct flash_area *secondary_fa;
+    struct image_header *hdr;
     uint32_t vtable_addr = 0;
     uint32_t *vtable = 0;
     uint32_t reset_addr = 0;
+    bool secondary_in_internal_flash;
+
+    secondary_fa = BOOT_IMG_AREA(state, BOOT_SECONDARY_SLOT);
+
+     if (strcmp(secondary_fa->fa_dev_name, "NRF_FLASH_DRV_NAME") == 0)
+    {
+        printk("=secondary slot in internal Flash=");
+        secondary_in_internal_flash = true;
+    }
+    else
+    {
+        printk("= secondary slot in External Flash %x =", secondary_fa->fa_off);
+        secondary_in_internal_flash = false;
+    }   
+    
+    if (secondary_in_internal_flash)
+    {
+        hdr = (struct image_header *)secondary_fa->fa_off;
+    }
+    else
+    {
+        hdr = boot_img_hdr(state, BOOT_SECONDARY_SLOT);
+    }
+   
     /* Patch needed for NCS. Since image 0 (the app) and image 1 (the other
      * B1 slot S0 or S1) share the same secondary slot, we need to check
      * whether the update candidate in the secondary slot is intended for
@@ -746,9 +777,23 @@ boot_validated_swap_type(struct boot_loader_state *state,
      */
 
     if (hdr->ih_magic == IMAGE_MAGIC) {
-        vtable_addr = (uint32_t)hdr + hdr->ih_hdr_size;
-        vtable = (uint32_t *)(vtable_addr);
-        reset_addr = vtable[1];
+        if (secondary_in_internal_flash)
+        {        
+            vtable_addr = (uint32_t)hdr + hdr->ih_hdr_size;
+            vtable = (uint32_t *)(vtable_addr);
+            reset_addr = vtable[1];
+            printk(" In vtable %x, reset addr %x ", vtable_addr, reset_addr); 
+        }
+        else
+        {                       
+            vtable_addr = hdr->ih_hdr_size;
+            int rc = flash_area_read(secondary_fa, vtable_addr+4, &reset_addr, sizeof(reset_addr));
+            if (rc != 0) {
+                return BOOT_SWAP_TYPE_FAIL;
+            }
+            vtable = (uint32_t *) (0x10000000 + SECONDARY_OFFSET_ADDRESS + vtable_addr); //0x10000000 is XIP base address            
+            printk(" Ext vtable %x, reset addr %x ", (uint32_t)vtable, reset_addr);             
+        }
 #ifdef PM_S1_ADDRESS
         const struct flash_area *primary_fa;
         int rc = flash_area_open(flash_area_id_from_multi_image_slot(
@@ -795,14 +840,41 @@ boot_validated_swap_type(struct boot_loader_state *state,
             uint32_t fw_size = hdr->ih_img_size;
 
             BOOT_LOG_INF("Starting network core update");
-            int rc = pcd_network_core_update(vtable, fw_size);
+            int rc = pcd_network_core_update(vtable, fw_size);       
 
             if (rc != 0) {
                 swap_type = BOOT_SWAP_TYPE_FAIL;
             } else {
                 BOOT_LOG_INF("Done updating network core");
-                rc = swap_erase_trailer_sectors(state,
-                        secondary_fa);
+                if (secondary_in_internal_flash)
+                {
+                    rc = swap_erase_trailer_sectors(state,
+                            secondary_fa);
+                    if (rc != 0) {
+                        printk("1error with erasing image trailor");
+                    }        
+                }
+                else
+                {
+                    //This is a workaround, since qspi nor flash fail to set the write_protection
+                    uint32_t off;
+                    uint32_t sz;
+                    uint32_t sector;
+                    const struct device *flash_dev;
+
+                    sector = boot_img_num_sectors(state, BOOT_SECONDARY_SLOT) - 1;
+                    sz = boot_img_sector_size(state, BOOT_SECONDARY_SLOT, sector);
+                    off = boot_img_sector_off(state, BOOT_SECONDARY_SLOT, sector);
+                    printk("**sz=%x,off=%x, areaSize=%x**", sz, off, secondary_fa->fa_size);
+                    if (off <= secondary_fa->fa_size && off + sz <= secondary_fa->fa_size)        
+                    {
+                        flash_dev = device_get_binding(secondary_fa->fa_dev_name);
+                        rc = flash_erase(flash_dev, secondary_fa->fa_off + off, sz);
+                        if (rc != 0) {
+                            printk("2error with erasing image trailor");
+                        } 
+                    }                  
+                }
                 swap_type = BOOT_SWAP_TYPE_NONE;
             }
         }
@@ -824,7 +896,7 @@ boot_validated_swap_type(struct boot_loader_state *state,
  */
 int
 boot_erase_region(const struct flash_area *fap, uint32_t off, uint32_t sz)
-{
+{    
     return flash_area_erase(fap, off, sz);
 }
 
@@ -1608,6 +1680,9 @@ boot_prepare_image_for_update(struct boot_loader_state *state,
          * if there is one.
          */
         BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
+        (void) boot_read_image_header(state, BOOT_PRIMARY_SLOT,
+				      boot_img_hdr(state, BOOT_PRIMARY_SLOT),
+				      bs);        
         return;
     }
 
